package com.cheersondemand.frameworks.retrofit;import com.cheersondemand.model.LoginRequest;import com.cheersondemand.model.SignUpRequest;import com.cheersondemand.model.AuthenticationResponse;import com.cheersondemand.model.SocialLoginRequest;import com.google.gson.Gson;import okhttp3.OkHttpClient;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Call;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;/** * Created by abhishekkumar on 2/7/18. */public class WebServicesWrapper {    private final static String BASE_URL = "http://ror.anasource.com:8090";    private static WebServicesWrapper wrapper;    protected WebServices webServices;    private Gson gson;    private WebServicesWrapper(String baseUrl) {        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(interceptor).build();        webServices = new Retrofit.Builder()                .addConverterFactory(GsonConverterFactory.create())                .baseUrl(baseUrl)                .client(client)                .build().create(WebServices.class);        gson = new Gson();    }    public static WebServicesWrapper getInstance() {        if (wrapper == null)            wrapper = new WebServicesWrapper(BASE_URL);        return wrapper;    }    public Call<AuthenticationResponse> signUp(ResponseResolver<AuthenticationResponse> apiResponseResponseResolve, SignUpRequest signUpRequestr) {        Call<AuthenticationResponse> apiResponseResponseCall = webServices.signUpUsingEmail(signUpRequestr);        apiResponseResponseCall.enqueue(apiResponseResponseResolve);        return apiResponseResponseCall;    }    public Call<AuthenticationResponse> loginUsingEmail(ResponseResolver<AuthenticationResponse> apiResponseResponseResolve, LoginRequest loginRequest) {        Call<AuthenticationResponse> apiResponseResponseCall = webServices.loginUsingEmail(loginRequest);        apiResponseResponseCall.enqueue(apiResponseResponseResolve);        return apiResponseResponseCall;    }    public Call<AuthenticationResponse> loginUsingSocial(ResponseResolver<AuthenticationResponse> apiResponseResponseResolve, SocialLoginRequest loginRequest) {        Call<AuthenticationResponse> apiResponseResponseCall = webServices.loginUsingSocial(loginRequest);        apiResponseResponseCall.enqueue(apiResponseResponseResolve);        return apiResponseResponseCall;    }}